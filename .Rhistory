library(Hmisc)
?cut2
plot(training$CompressiveStrength, col=cut2(training$Age, g=10) +1)
plot(training$CompressiveStrength, col=cut2(training$Age, g=10))
plot(training$CompressiveStrength, col=cut2(training$Cement, g=10))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
plot(training$CompressiveStrength, col=cut2(training$Age, g=10))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
plot(training$CompressiveStrength, col=cut2(training$Cement, g=10))
plot(training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag, g=10))
plot(training$CompressiveStrength, col=cut2(training$Water, g=10))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
training
str(training)
len(training)
lenght(training)
length(training)
par(mfrow=c(3,3))
for (i<-1..20) { i}
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
par(mfrow=c(3,3))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
par(mfrow=c(3,3))
for (i in 1:9) { plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))}
par(mfrow=c(3,3))
for (i in 1:9) { plot(training$CompressiveStrength, col=cut2(training[[i]], g=10))}
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(training$Superplasticizer)
par(mfcol=(1,1))
par(mfcol=c(1,1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
summary(training)
hist(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer+2))
?hist
hist(training$Superplasticizer, breaks=100)
hist(log(training$Superplasticizer+1), breaks=100)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
names(training)
lgrep
?lgrep
?grep
grepl(
"IL_.*", names(trainig))
grepl(
"IL_.*", names(training))
il = grepl("IL_.*", names(training))
ilData = training[il,]
ilData
il
traning[ilData]
traning[il]
training[il]
str(training[il])
il = grepl("^IL_.*", names(training))
idData = training[il]
str(idData)
?preProcess
m = preProcess(idData, "pca", thresh=0.9)
m
?train
train(idData, training$diagnosis, method="glm")
fullglm = train(idData, training$diagnosis, method="glm")
caret
?train
?test
??caret
?train
??caret
fullPred <- predict(fullglm, newdata=testing)
fullPred
confusionMatrix(fullPred, testing$diagnosis)
idData
train
?train
train(idData, training$diagnosis, method="glm", preProcess="pca")
train(idData, training$diagnosis, method="glm", preProcess="pca", threshold=0.8)
train(idData, training$diagnosis, method="glm", preProcess="pca", thresh=0.8)
m = preProcess(idData, "pca", thresh=0.8)
m
predict(m, newdata=idDat)
predict(m, newdata=idData)
pcaTrain = predict(m, newdata=idData)
install.packages("scidb")
library(scidb)
??scidb
?scidbdisconnect
?scidbconnect
scidbconnect(host='152.83.253.80')
scidbconnect(host='152.83.253.80')
my.mat <- as.scidb(matrix(rnorm(1000*1000), 1000))
my.mat
str(my.mat)
my.mat[]
ls
str(my.mat)
my.mat.crossprod <- crossprod( mymat[])
my.mat.crossprod <- crossprod( my.mat[])
str(my.mat.crossprod)
my.mat.crossprod <- crossprod( my.mat)
my.mat.svd.5 <- svd( my.mat, nu = 5)
str(my.mat.svd.5)
my.mat.svd.5$u[]
my.mat.svd.5$u[1:5]
my.mat.svd.5$u[1]
my.mat.svd.5$u[1,1]
my.mat.svd.5$u[1,1][]
my.mat.svd.5$u[1,5][]
my.mat.svd.5$u[1,1:5][]
my.mat.crossprod <- crossprod( my.mat)
my.mat.crossprod[1:5,1:5][]
summary(my.mat.crossprod)
my.mat.crossprod.t <- crossprod( my.mat[])
summary(my.mat.crossprod.t)
class(my.mat.crossprod.t)
my.mat.crossprod <- crossprod( my.mat)
dim(my.mat)
?as.scidb
??scidb
str(my.mat)
?crossprod,scidb,scidb-method
?crossprod.scidb
?crossprod
?scidb.crossprod
??scidb.crossprod
??crossprod
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(traning)
hist(traninig)
hist(training)
hist(training$SuperPlasticizer)
hist(training$SuperPlasticizer)
training$SuperPlasticizer
inTrain
hist(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training
summary(training)
training$Superplasticizer
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preprocess
?preProcess
names(training)
?grep
grepl("^IL.*", names(training))
training[,grepl("^IL.*", names(training))]
preProcess(training[,grepl("^IL.*", names(training))], method="pca", thresh=0.9)
?shapiro.test
library(datasets)
datasets
ToothGrowth
summary(ToothGrowth)
?ToothGrowth
boxplot(len ~ supp, data=ToothGrowth)
boxplot(len ~ dost, data=ToothGrowth)
boxplot(len ~ dose, data=ToothGrowth)
boxplot(len ~ dose + dose, data=ToothGrowth)
boxplot(len ~ dose + supp, data=ToothGrowth)
boxplot(len ~ supp + dose, data=ToothGrowth)
boxplot(len ~ supp + dose, data=ToothGrowth, col = dose)
boxplot(len ~ supp + dose, data=ToothGrowth, col = ToothGrowth$dose)
boxplot(len ~ supp + dose, data=ToothGrowth)
boxplot(len ~ dose + supp, data=ToothGrowth)
t.test(len ~ supp, data=ToothGrowth)
?t.test
t.test(len ~ supp, data=ToothGrowth, paried=FALSE, var.equal=FALSE)
t.test(len ~ supp, data=ToothGrowth, paried=FALSE, var.equal=TRUE)
boxplot(len ~ supp, data=ToothGrowth)
hist(ToothGrowth$len)
hist(ToothGrowth[supp==1,]$len)
hist(ToothGrowth[ToothGrowth$supp==1,]$len)
ToothGrowth[ToothGrowth$supp==1,]
ToothGrowth[as.numeric(ToothGrowth$supp)==1,]
ToothGrowth[as.numeric(ToothGrowth$supp)==1,]$len
hist(ToothGrowth[as.numeric(ToothGrowth$supp)==1,]$len)
hist(ToothGrowth[as.numeric(ToothGrowth$supp)==1,]$len)
hist(ToothGrowth[as.numeric(ToothGrowth$supp)==2,]$len)
hist(ToothGrowth[as.numeric(ToothGrowth$supp)==1,]$len)
hist(ToothGrowth[as.numeric(ToothGrowth$supp)==2,]$len)
hist(ToothGrowth[as.numeric(ToothGrowth$supp)==1,]$len)
hist(log(ToothGrowth[as.numeric(ToothGrowth$supp)==1,]$len)
)
hist(ToothGrowth[as.numeric(ToothGrowth$supp)==1,]$len)
?boxplot
means
boxplot(len~supp, data=ToothGrowth)
means <- tapply(ToothGrowth$len,ToothGrowth$supp,mean)
points(means,col="red",pch=18)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?aes
?geom_boxplot
?stat_summary
t.test(len~supp, paired=FALSE)
t.test(len~supp, data=ToothGrowth, paired=FALSE)
?t.test
$ToothGrowth
?ToothGrowth
tsupp <-t.test(len~supp, data=ToothGrowth, paired=FALSE, var.equal = FALSE)
tsupp
plot(tsupp)
summary(tsup)
summary(tsupp)
tsupp$p.value
tsupp$conf.int
?ggplot
?tapply
means
means <- aggregate(len ~ dose + supp, data=ToothGrowth, FUN=mean)
means
boxplot(len ~ dose + supp, data = ToothGrowth)
means <- aggregate(len ~ dose + supp, data=ToothGrowth, FUN=mean)
points(means, col="red", pch=18)
?subset
subset(ToothGrowth,dose=2)
subset(ToothGrowth,dose==2)
ToothGrowth
?ToothGrowth
subset(ToothGrowth, supp=="OJ" && dose!=1)
subset(ToothGrowth, dose!=1)
subset(ToothGrowth, supp=="OJ")
subset(ToothGrowth, supp=="OJ" & dose!=1)
?qqplot
source('~/.active-rstudio-document', echo=TRUE)
qqplot(averages_of_samples)
?qqplot
qqnorm(averages_of_samples)
qqline(averages_of_samples)
?qplot
qqplot
?qqplot
library(knitr)
?knit2html
?knit
before <- c(140,138, 150, 148, 135)
after <- c(132, 135, 151, 146, 130)
t.test(after, before)
t.test(after, before)
?t.test
t.test(after, before, parired=TRUE)
t.test(after, before, parired=TRUE, var.equal=TRUE)
t.test(after-before, parired=TRUE, var.equal=TRUE)
tp
pt
qt(1-0.05/2)
qt(1-0.05/2, df=8)
1100 + c(-1,1)*qt(1-0.05/2, df=8)*30/3
c(1077,1123)/qt(1-0.05)*qt(1-0.5/2)
c(1077,1123)/qt(1-0.05,8)*qt(1-0.5/2,8)
c90 <-c(1077,1123)
m<- mean(c90)
m
m + (c90-m)/qt(1-0.05,8)*qt(1-0.5/2,8)
qt(1-0.05,8)
(c90-m)/qt(1-0.05,8)
(c90-m)/qt(1-0.05,8)*3
(c90-m)/qt(1-0.05,8)*3/3
(c90-m)/qt(1-0.05,8)*3/3**qt(1-0.5/2,8)
((c90-m)/qt(1-0.05,8))*qt(1-0.5/2,8)
(c90-m)/qt(1-0.05,8)*qt(1-0.5/2,8)
qt(1-0.5/2,8)/qt(1-0.05,8)
m + (c90-m)/qt(1-0.05,8)*qt(1-0.05/2,8)
s1<- 1.5
s1<- 1.8
sd <- sqrt(s1^2)
sd <- sqrt(s1^2)
sd
s1<-1.5
s2<-1.8
sd <- sqrt((s1^2*8 + s2^2*8)/(9+9-2) )
sd
sdd <-sd*sqrt(1/9+1/9)
sdd
tp(4/sdd,8)
pt(4/sdd,8)
2*(1-pt(4/sdd,8))
ppois
?ppois
ppois(9, 1787/100)
ppois(9, 1787/100, lower.tail=TRUE)
ppois(9, 1787/100, lower.tail=FALSE)
9/1787
1787/100
ppois(9, 1787/100, lower.tail=FALSE)
ppois(9, 1787/100)
ppois(9, 1787/100)
ppois(9, 1787/100, lower.tail=FALSE)
1787/100
ppois(10, 1787/100)
?power.t.test
power.t.test(100, sd=0.04,alternative="one.sided")
power.t.test(100, sd=0.04,alternative="one.sided", delta=0.01)
power.t.test(100, sd=0.04,alternative="one.sided", delta=0.01, type="one.sample")
power.t.test(power=0.9, sd=0.04,alternative="one.sided", delta=0.01, type="one.sample")
pbinom
?pbinom
pbinom(0,2,0.5)
pbinom(1,2,0.5)
pbinom(2,2,0.5)
pbinom(0,2,0.5)
pbinom(1,2,0.5)
pbinom(2,4,0.5, lower.tail=FALSE)
source('~/edu/kaggle/facebook/R/sql.R')
source('~/edu/kaggle/facebook/R/ggplot.R')
result$time
result$duration
source('~/.active-rstudio-document')
source('~/edu/kaggle/facebook/R/ggplot.R')
source('~/edu/kaggle/facebook/R/ggplot.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?plot
source('~/.active-rstudio-document')
source('~/edu/kaggle/facebook/R/ggplot.R')
source('~/edu/kaggle/facebook/R/plot.R')
source('~/edu/kaggle/facebook/R/sql.R')
source('~/edu/kaggle/facebook/R/plot.R')
source('~/edu/kaggle/facebook/R/plot.R')
source('~/edu/kaggle/facebook/R/ggplot.R')
source('~/edu/kaggle/facebook/R/ggplot.R')
source('~/.active-rstudio-document')
source('~/edu/kaggle/facebook/R/ggplot.R')
source('~/edu/kaggle/facebook/R/ggplot.R')
source('~/edu/kaggle/facebook/R/sql.R')
head(result)
source('~/edu/kaggle/facebook/R/sql.R')
source('~/edu/kaggle/facebook/R/plot.R')
source('~/edu/kaggle/facebook/R/ggplot.R')
source('~/edu/kaggle/facebook/R/plot.R')
source('~/edu/kaggle/facebook/R/sql.R')
source('~/edu/kaggle/facebook/R/plot.R')
source('~/.active-rstudio-document')
source('~/edu/kaggle/facebook/R/plot.R')
source('~/edu/kaggle/facebook/R/ggplot.R')
source('~/.active-rstudio-document')
x
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(result)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/facebook/R/ggplot.R', echo=TRUE)
summary(result)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/facebook/R/sql.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/facebook/R/sql.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/facebook/R/sql.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/facebook/R/ggplot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/facebook/R/ggplot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
exp(12)
summary(result)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
times <-data.frame(x=(start_time-9.632e+15)/5.263e+07/1000,y=duration/5.263e+07/1000))
times <-data.frame(x=(result$start_time-9.632e+15)/5.263e+07/1000,y=result$duration/5.263e+07/1000))
times <-data.frame(x=(result$start_time-9.632e+15)/5.263e+07/1000,y=result$duration/5.263e+07/1000)
times
summary(times[times$x<1000,])
summary(times[times$x>1000,])
summary(times[times$x>2000,])
itis
iris
summary(iris)
library(ggplot2)
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_point()
g <- ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_point()
g
str(g)
g$data
g$layers
class(g)
print(g)
summary(g)
str(g)
?print.trellis
??print.trellis
print.gg
?print.gg
ls()
gedit
?grid
g <- ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_point()  + stats_smooth()
g <- ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_point()  + stat_smooth()
g
str(g)
str(g$layers)
str(g$layers[1])
g$layers[1]
g$layers[2]
library(caret)
?createDataPartition
setwd("~/edu/kaggle/liberty")
library(caret)
library(xgboost)
?xgb.cv
?xgb.cv
source('~/edu/kaggle/liberty/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/liberty/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
plot(model)
summary(model)
summary(model$finalModel)
model$finalModel
plot(model$finalModel)
plot(model$finalModel)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
plot(model)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
plot(model)
plot(model)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
source('~/edu/kaggle/liberty/train_glm.R', echo=TRUE)
plot(model)
featurePlo
featurePlot
?featurePlot
featurePlot(train_set(,1:4), train_data#Hazard, plot="scatter")
)
featurePlot(train_set[,1:4], train_data#Hazard, plot="scatter")
)
featurePlot(train_set[,1:4], train_data#Hazard, plot="scatter")
()
))
featurePlot(train_set[,1:4], train_data$Hazard, plot="scatter")
trellis.par.set(theme = col.whitebg(), warn = FALSE)
featurePlot(train_set[,1:4], train_data$Hazard, plot="scatter")
featurePlot(train_set[,2:10], train_data$Hazard, plot="scatter")
featurePlot(train_set[,2:4], train_data$Hazard, plot="scatter")
featurePlot(train_set[,2:6], train_data$Hazard, plot="scatter")
featurePlot(train_set[,2:7], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,3,4,10)], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,3,,10)], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,3,10)], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,3)], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,11)], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,11, 12)], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,3,11)], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,3,11)], train_data$Hazard, plot="box")
featurePlot(train_set[,c(2,3,11)], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,3,11,14)], train_data$Hazard, plot="scatter")
featurePlot(train_set[,c(2,3,11,14,15)], train_data$Hazard, plot="scatter")
